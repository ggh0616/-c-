
-------------------------------------------------
저장한 시간 - 2022-10-07 13:28:38 GMT+9
-------------------------------------------------
//-----------------------------------------------------------------------------
// 2022. 2학기 10월 7일 C++                                   월56금56 (5주 1일)
//
// 동적 메모리 할당
// 각 메모리 공간의 주소를 출력하여
// 메모리가 서로 다른 공간을 사용하고 있음을 확인
// 
// - 다음 시간
// 함수설명 - 포인터 / 레퍼런스 (정식 소개)
// 지금까지 배운 것 실습
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"

int ga;
double gb;

//--------
int main()
//--------
{
	int a;
	double b;

	int* p = new int[50];

	std::cout << std::addressof(p) << std::endl;

	save("05.cpp");
}
-------------------------------------------------
저장한 시간 - 2022-10-07 13:28:45 GMT+9
-------------------------------------------------
//-----------------------------------------------------------------------------
// 2022. 2학기 10월 7일 C++                                   월56금56 (5주 1일)
//
// 동적 메모리 할당
// 각 메모리 공간의 주소를 출력하여
// 메모리가 서로 다른 공간을 사용하고 있음을 확인
// 
// - 다음 시간
// 함수설명 - 포인터 / 레퍼런스 (정식 소개)
// 지금까지 배운 것 실습
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"

int ga;
double gb;

//--------
int main()
//--------
{
	int a;
	double b;

	int* p = new int;

	std::cout << std::addressof(p) << std::endl;

	save("05.cpp");
}
-------------------------------------------------
저장한 시간 - 2022-10-07 13:32:04 GMT+9
-------------------------------------------------
//-----------------------------------------------------------------------------
// 2022. 2학기 10월 7일 C++                                   월56금56 (5주 1일)
//
// 동적 메모리 할당
// 각 메모리 공간의 주소를 출력하여
// 메모리가 서로 다른 공간을 사용하고 있음을 확인
// 
// - 다음 시간
// 함수설명 - 포인터 / 레퍼런스 (정식 소개)
// 지금까지 배운 것 실습
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"

int ga;
double gb;

//--------
int main()
//--------
{
	int a;
	double b;

	int* p = new int[100];

	std::cout << std::addressof(a) << std::endl;
	std::cout << std::addressof(b) << std::endl;
	std::cout << std::addressof(ga) << std::endl;
	std::cout << std::addressof(gb) << std::endl;
	std::cout << std::addressof(p) << std::endl;
	std::cout << std::addressof(p[0]) << std::endl;

	save("05.cpp");
}
-------------------------------------------------
저장한 시간 - 2022-10-07 13:32:20 GMT+9
-------------------------------------------------
//-----------------------------------------------------------------------------
// 2022. 2학기 10월 7일 C++                                   월56금56 (5주 1일)
//
// 동적 메모리 할당
// 각 메모리 공간의 주소를 출력하여
// 메모리가 서로 다른 공간을 사용하고 있음을 확인
// 
// - 다음 시간
// 함수설명 - 포인터 / 레퍼런스 (정식 소개)
// 지금까지 배운 것 실습
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"

int ga;
double gb;

//--------
int main()
//--------
{
	int a;
	double b;

	int* p = new int[100];

	std::cout << std::addressof(a) << std::endl;
	std::cout << std::addressof(b) << std::endl;
	std::cout << std::addressof(p) << std::endl;
	std::cout << std::addressof(ga) << std::endl;
	std::cout << std::addressof(gb) << std::endl;
	std::cout << std::addressof(p[0]) << std::endl;

	save("05.cpp");
}
-------------------------------------------------
저장한 시간 - 2022-10-07 13:32:39 GMT+9
-------------------------------------------------
//-----------------------------------------------------------------------------
// 2022. 2학기 10월 7일 C++                                   월56금56 (5주 1일)
//
// 동적 메모리 할당
// 각 메모리 공간의 주소를 출력하여
// 메모리가 서로 다른 공간을 사용하고 있음을 확인
// 
// - 다음 시간
// 함수설명 - 포인터 / 레퍼런스 (정식 소개)
// 지금까지 배운 것 실습
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"

int ga;
double gb;

//--------
int main()
//--------
{
	int a;
	double b;

	int* p = new int[100];

	std::cout << std::addressof(a) << std::endl;
	std::cout << std::addressof(b) << std::endl;
	std::cout << std::addressof(p) << std::endl;
	std::cout << std::addressof(ga) << std::endl;
	std::cout << std::addressof(gb) << std::endl;
	std::cout << std::addressof(p[0]) << std::endl;
	std::cout << std::addressof(main) << std::endl;
	std::cout << std::addressof(save) << std::endl;

	save("05.cpp");
}
-------------------------------------------------
저장한 시간 - 2022-10-07 13:35:05 GMT+9
-------------------------------------------------
//-----------------------------------------------------------------------------
// 2022. 2학기 10월 7일 C++                                   월56금56 (5주 1일)
// 
// - 다음 시간
// 함수설명 - 포인터 / 레퍼런스 (정식 소개)
// 지금까지 배운 것 실습
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	// [문제]
	int a = 1;
	int b = 2;

	std::cout << a << ", " << b << std::endl;
	save("05.cpp");
}
-------------------------------------------------
저장한 시간 - 2022-10-07 13:37:02 GMT+9
-------------------------------------------------
//-----------------------------------------------------------------------------
// 2022. 2학기 10월 7일 C++                                   월56금56 (5주 1일)
// 
// - 다음 시간
// 함수설명 - 포인터 / 레퍼런스 (정식 소개)
// 지금까지 배운 것 실습
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"

void change(int a, int b);

//--------
int main()
//--------
{
	int a = 1;
	int b = 2;
	// [문제] 여기에서 함수 change를 호출하였다. 
	// change는 a와 b의 값을 서로 바꾼다.

	change(a, b);
	std::cout << a << ", " << b << std::endl; //2, 1로 출력
	save("05.cpp");
}

void change(int a, int b)
{
	int temp;
	temp = a;
	a = b;
	b = temp;
}

-------------------------------------------------
저장한 시간 - 2022-10-07 13:37:21 GMT+9
-------------------------------------------------
//-----------------------------------------------------------------------------
// 2022. 2학기 10월 7일 C++                                   월56금56 (5주 1일)
// 
// - 다음 시간
// 함수설명 - 포인터 / 레퍼런스 (정식 소개)
// 지금까지 배운 것 실습
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"

void change(int a, int b);

//--------
int main()
//--------
{
	int a = 1;
	int b = 2;
	// [문제] 여기에서 함수 change를 호출하였다. 
	// change는 a와 b의 값을 서로 바꾼다.

	change(a, b);
	std::cout << a << ", " << b << std::endl; //2, 1로 출력
	save("05.cpp");
}

void change(int a, int b)
{
	int temp;
	temp = b;
	b = a;
	a = temp;
}

-------------------------------------------------
저장한 시간 - 2022-10-07 13:37:49 GMT+9
-------------------------------------------------
//-----------------------------------------------------------------------------
// 2022. 2학기 10월 7일 C++                                   월56금56 (5주 1일)
// 
// - 다음 시간
// 함수설명 - 포인터 / 레퍼런스 (정식 소개)
// 지금까지 배운 것 실습
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"

void change(int a, int b);

//--------
int main()
//--------
{
	int a = 1;
	int b = 2;
	// [문제] 여기에서 함수 change를 호출하였다. 
	// change는 a와 b의 값을 서로 바꾼다.

	change(a, b);
	std::cout << a << ", " << b << std::endl; //2, 1로 출력
	save("05.cpp");
}

void change(int a, int b)
{
	int temp;
	temp = a;
	a = b;
	b = temp;
}

-------------------------------------------------
저장한 시간 - 2022-10-07 13:38:24 GMT+9
-------------------------------------------------
//-----------------------------------------------------------------------------
// 2022. 2학기 10월 7일 C++                                   월56금56 (5주 1일)
// 
// - 다음 시간
// 함수설명 - 포인터 / 레퍼런스 (정식 소개)
// 지금까지 배운 것 실습
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"

void change(int* a, int* b);

//--------
int main()
//--------
{
	int a = 1;
	int b = 2;
	// [문제] 여기에서 함수 change를 호출하였다. 
	// change는 a와 b의 값을 서로 바꾼다.

	change(&a, &b);
	std::cout << a << ", " << b << std::endl; //2, 1로 출력
	save("05.cpp");
}

void change(int* a, int* b)
{
	int temp;
	temp = *a;
	*a = *b;
	*b = temp;
}

-------------------------------------------------
저장한 시간 - 2022-10-07 13:46:58 GMT+9
-------------------------------------------------
//-----------------------------------------------------------------------------
// 2022. 2학기 10월 7일 C++                                   월56금56 (5주 1일)
// 
// - 다음 시간
// 함수설명 - 포인터 / 레퍼런스 (정식 소개)
// 지금까지 배운 것 실습
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"

void change(int* , int*);

//--------
int main()
//--------
{
	int a = 1;
	int b = 2;
	// [문제] 여기에서 함수 change를 호출하였다. 
	// change는 a와 b의 값을 서로 바꾼다.
	// change를 선언하고 정의하라.

	change(&a, &b);
	std::cout << a << ", " << b << std::endl; //2, 1로 출력
	save("05.cpp");
}

void change(int* a, int* b)
{
	int tmp;
	tmp = *a;
	*a = *b;
	*b = tmp;
}

-------------------------------------------------
저장한 시간 - 2022-10-07 14:08:44 GMT+9
-------------------------------------------------
//-----------------------------------------------------------------------------
// 2022. 2학기 10월 7일 C++                                   월56금56 (5주 1일)
// 
// - 다음 시간
// 함수설명 - 포인터 / 레퍼런스 (정식 소개)
// 지금까지 배운 것 실습
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
// 인자의 형식으로 어떤 함수인지 알 수 있다면 c++언어는 같은 이름의 함수를 쓸 수 있다.
// function overloading
// 그런데 컴파일러는 이름이 같은 함수를 알아서 구분되는 이름으로 변경한다. (name mangling)

void change(int, int);
void change(int*, int*);

//--------
int main()
//--------
{
	int a = 1;
	int b = 2;
	// [문제] 여기에서 함수 change를 호출하였다. 
	// change는 a와 b의 값을 서로 바꾼다.
	// change를 선언하고 정의하라.

	change(a, b);
	change(&a, &b);
	std::cout << a << ", " << b << std::endl; //2, 1로 출력
	save("05.cpp");
}

void change(int a, int b)
{
	int tmp{ a };
	a = b;
	b = tmp;
}

void change(int* p, int* q)
{
	
	int tmp{ *p };
	*q = *p;
	*q = tmp;
}

-------------------------------------------------
저장한 시간 - 2022-10-07 14:08:54 GMT+9
-------------------------------------------------
//-----------------------------------------------------------------------------
// 2022. 2학기 10월 7일 C++                                   월56금56 (5주 1일)
// 
// - 다음 시간
// 함수설명 - 포인터 / 레퍼런스 (정식 소개)
// 지금까지 배운 것 실습
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
// 인자의 형식으로 어떤 함수인지 알 수 있다면 c++언어는 같은 이름의 함수를 쓸 수 있다.
// function overloading
// 그런데 컴파일러는 이름이 같은 함수를 알아서 구분되는 이름으로 변경한다. (name mangling)

void change(int, int);
void change(int*, int*);

//--------
int main()
//--------
{
	int a = 1;
	int b = 2;
	// [문제] 여기에서 함수 change를 호출하였다. 
	// change는 a와 b의 값을 서로 바꾼다.
	// change를 선언하고 정의하라.

	change(a, b);
	change(&a, &b);
	std::cout << a << ", " << b << std::endl; //2, 1로 출력
	save("05.cpp");
}

void change(int a, int b)
{
	int tmp{ a };
	a = b;
	b = tmp;
}

void change(int* p, int* q)
{	
	int tmp{ *p };
	*p = *q;
	*q = tmp;
}

-------------------------------------------------
저장한 시간 - 2022-10-07 14:09:13 GMT+9
-------------------------------------------------
//-----------------------------------------------------------------------------
// 2022. 2학기 10월 7일 C++                                   월56금56 (5주 1일)
// 
// - 다음 시간
// 함수설명 - 포인터 / 레퍼런스 (정식 소개)
// 지금까지 배운 것 실습
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
// 인자의 형식으로 어떤 함수인지 알 수 있다면 c++언어는 같은 이름의 함수를 쓸 수 있다.
// function overloading
// 그런데 컴파일러는 이름이 같은 함수를 알아서 구분되는 이름으로 변경한다. (name mangling)

void change(int, int);
void change(int*, int*);

//--------
int main()
//--------
{
	int a = 1;
	int b = 2;
	// [문제] 여기에서 함수 change를 호출하였다. 
	// change는 a와 b의 값을 서로 바꾼다.
	// change를 선언하고 정의하라.

	change(a, b);
	std::cout << a << ", " << b << std::endl; //2, 1로 출력
	change(&a, &b);
	std::cout << a << ", " << b << std::endl; //2, 1로 출력
	save("05.cpp");
}

void change(int a, int b)
{
	int tmp{ a };
	a = b;
	b = tmp;
}

void change(int* p, int* q)
{	
	int tmp{ *p };
	*p = *q;
	*q = tmp;
}

-------------------------------------------------
저장한 시간 - 2022-10-07 14:27:29 GMT+9
-------------------------------------------------
//-----------------------------------------------------------------------------
// 2022. 2학기 10월 7일 C++                                   월56금56 (5주 1일)
// 
// 이번 시간
// 포인터 / 레퍼런스 (정식 소개)
// 지금까지 배운 것 실습
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
// 인자의 형식으로 어떤 함수인지 알 수 있다면 c++언어는 같은 이름의 함수를 쓸 수 있다.
// function overloading
// 그런데 컴파일러는 이름이 같은 함수를 알아서 구분되는 이름으로 변경한다. (name mangling)

void change(int, int);
void change(int*, int*);

//--------
int main()
//--------
{
	//int a = 1;
	//int b = 2;
	//// [문제] 여기에서 함수 change를 호출하였다. 
	//// change는 a와 b의 값을 서로 바꾼다.
	//// change를 선언하고 정의하라.
	//change(a, b);
	//std::cout << a << ", " << b << std::endl; //2, 1로 출력
	//change(&a, &b);
	//std::cout << a << ", " << b << std::endl; //2, 1로 출력

	int num{100};

	int* p{ &num };
	*p = 200;

	std::cout << num << std::endl;
	save("05.cpp");
}

void change(int a, int b)
{
	int tmp{ a };
	a = b;
	b = tmp;
}

void change(int* p, int* q)
{	
	int tmp{ *p };
	*p = *q;
	*q = tmp;
}

-------------------------------------------------
저장한 시간 - 2022-10-07 14:53:50 GMT+9
-------------------------------------------------
//-----------------------------------------------------------------------------
// 2022. 2학기 10월 7일 C++                                   월56금56 (5주 1일)
// 
// * - 한 지역에서 다른 지역의 메모리를 ascess 하기 위한 도구
//	   c++ 에서는 *를 사용하지 않는다. (new int[]와 같은 경우는 예외)
//	    c++ 에서는 *를 대체하는 &가 있기 때문이다.
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
// 인자의 형식으로 어떤 함수인지 알 수 있다면 c++언어는 같은 이름의 함수를 쓸 수 있다.
// function overloading
// 그런데 컴파일러는 이름이 같은 함수를 알아서 구분되는 이름으로 변경한다. (name mangling)


//--------
int main()
//--------
{
	int a = 100;

	int& abc = a;
	int& r = a;
	int& x = r;

	x = 200;
	std::cout << x << " " << a << " " << abc << " " << r << std::endl;
	save("05.cpp");
}

-------------------------------------------------
저장한 시간 - 2022-10-07 15:02:21 GMT+9
-------------------------------------------------
//-----------------------------------------------------------------------------
// 2022. 2학기 10월 7일 C++                                   월56금56 (5주 1일)
// 
// * - 한 지역에서 다른 지역의 메모리를 ascess 하기 위한 도구
//	   c++ 에서는 *를 사용하지 않는다. (new int[]와 같은 경우는 예외)
//	    c++ 에서는 *를 대체하는 &가 있기 때문이다.
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
// 인자의 형식으로 어떤 함수인지 알 수 있다면 c++언어는 같은 이름의 함수를 쓸 수 있다.
// function overloading
// 그런데 컴파일러는 이름이 같은 함수를 알아서 구분되는 이름으로 변경한다. (name mangling)

void change(int&, int&);

void change(int& a, int& b)
{
	int temp{ a };
	a = b;
	b = temp;
}

//--------
int main()
//--------
{
	int a{ 1 }, b{ 2 };

	change(a, b);	// C++ 언어는
					// 1. change( int, int );
					// 2. change( int&, int& );
	std::cout << a << ", " << b << std::endl;
	save("05.cpp");
}


-------------------------------------------------
저장한 시간 - 2022-10-07 15:17:24 GMT+9
-------------------------------------------------
//-----------------------------------------------------------------------------
// 2022. 2학기 10월 7일 C++                                   월56금56 (5주 1일)
// 
// * - 한 지역에서 다른 지역의 메모리를 ascess 하기 위한 도구
//	   c++ 에서는 *를 사용하지 않는다. (new int[]와 같은 경우는 예외)
//	   c++ 에서는 *를 대체하는 &가 있기 때문이다.
// & - 이미 존재하는 메모리에 붙이는 별명(alias)
//	   *를 대체한다.
//	   한 지역에서 다른 지역의 메모리를 원격 조작한다.
//	   함수의 인자로 객체가 전달될 때 복사가 되지 않도록 한다. 
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

void change(int&, int&);

void change(int& p, int& q) // &는 자동으로 해줌
{
	int temp{ p };
	p = q;
	q = temp;
}

//--------
int main()
//--------
{
	int a{ 1 }, b{ 2 };

	change(a, b);

	std::cout << a << ", " << b << std::endl;

	save("05.cpp");
}


-------------------------------------------------
저장한 시간 - 2022-10-07 15:17:34 GMT+9
-------------------------------------------------
//-----------------------------------------------------------------------------
// 2022. 2학기 10월 7일 C++                                   월56금56 (5주 1일)
// 
// * - 한 지역에서 다른 지역의 메모리를 ascess 하기 위한 도구
//	   c++ 에서는 *를 사용하지 않는다. (new int[]와 같은 경우는 예외)
//	   c++ 에서는 *를 대체하는 &가 있기 때문이다.
// & - 이미 존재하는 메모리에 붙이는 별명(alias)
//	   *를 대체한다.
//	   한 지역에서 다른 지역의 메모리를 원격 조작한다.
//	   함수의 인자로 객체가 전달될 때 복사가 되지 않도록 한다. 
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

void change(int&, int&);

void change(int& p, int& q) // &는 자동으로 해줌
{
	int temp{ p };
	p = q;
	q = temp;
}

//--------
int main()
//--------
{
	int a{ 1 }, b{ 2 };

	change(a, b);

	std::cout << a << ", " << b << std::endl;

	save("05.cpp");
}

